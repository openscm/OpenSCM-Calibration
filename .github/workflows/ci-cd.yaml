# Massive thanks to https://github.com/marketplace/actions/install-poetry-action
# Some more inspo for workflows could come from here
# https://github.com/LaurenceRawlings/python-poetry-cicd/tree/main/.github/workflows
name: CI-CD

on:
  pull_request:
  push:
    branches: [main]
    tags: ['v*']

jobs:
  linting-and-docs:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
      - name: Set up python
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"
      - name: Load cached Poetry installation
        id: cached-poetry
        uses: actions/cache@v3
        with:
          path: ~/.local  # the path depends on the OS
          key: poetry-0  # increment to reset cache
      - name: Install Poetry
        if: steps.cached-poetry.outputs.cache-hit != 'true'
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-linting-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      - name: Install package
        run: poetry install --no-interaction
      - name: Run linters
        run: |
          echo "flake8"
          poetry run flake8 -v src tests
          echo "black"
          poetry run black --check src tests docs/source/conf.py
          echo "isort"
          poetry run isort -v --check-only src tests
          echo "mypy"
          poetry run mypy src
          echo "pylint"
          poetry run pylint src
          echo "pydocstyle"
          poetry run pydocstyle -v src
          echo "bandit"
          poetry run bandit -r src

  tests:
    strategy:
      fail-fast: false
      matrix:
        os: [ "ubuntu-latest" ]
        python-version: [ "3.9", "3.10", "3.11" ]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
      - name: Set up python ${{ matrix.python-version }}
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Load cached Poetry installation
        id: cached-poetry
        uses: actions/cache@v3
        with:
          path: ~/.local  # the path depends on the OS
          key: ${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-poetry-0  # increment to reset cache
      - name: Install Poetry
        if: steps.cached-poetry.outputs.cache-hit != 'true'
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      - name: Install package
        run: poetry install --no-interaction
      - name: Run tests
        run: |
          poetry run pytest -r a -vv --cov --cov-report=xml
          poetry run coverage report
      # TODO: Upload code coverage if ubuntu with Python 3.9

# tests
# build package
# test built package
# deploy (separate into different file and only do on master i.e. after tests
#         have passed, or reuse test workflow before deploying)
