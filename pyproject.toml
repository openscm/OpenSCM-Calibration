[tool.coverage.run]
source = ["openscm_calibration"]

[tool.poetry]
name = "openscm-calibration"
version = "0.5.0"
description = ""
authors = ["Zebedee Nicholls <zebedee.nicholls@climate-energy-college.org>"]
readme = "README.rst"
packages = [{include = "openscm_calibration", from = "src"}]

[tool.poetry.dependencies]
python = "^3.9"
attrs = "^22.2.0"
scmdata = "0.15.0"
openscm-units = "^0.5.0"

notebook = { version = "^6.5.3", optional = true }
emcwrap = { version = "^0.2.4", optional = true }
multiprocess = { version = "^0.70.14", optional = true }
tqdm = { version = "^4.65.0", optional = true }
corner = { version = "^2.2.1", optional = true }
seaborn = { version = "^0.12.2", optional = true }
h5py = { version = "^3.8.0", optional = true }
ipywidgets = { version = "^8.0.6", optional = true }
more-itertools = "^9.1.0"

[tool.poetry.extras]
notebooks = ["notebook", "emcwrap", "multiprocess", "tqdm", "corner", "seaborn", "nb-black", "h5py", "ipywidgets"]
plots = ["corner", "seaborn"]

[tool.poetry.group.tests.dependencies]
pytest = "^7.2.2"
emcee = "^3.1.4"
multiprocess = "^0.70.14"

[tool.poetry.group.docs.dependencies]
myst-nb = "^0.17.0"
sphinx-rtd-theme = "^1.2.0"
sphinx-autodoc-typehints = "^1.23.0"
jupytext = "^1.14.5"
sphinx-copybutton = "^0.5.2"

[tool.poetry.group.dev.dependencies]
black = "^23.1.0"
flake8 = "^6.0.0"
mypy = "^1.1.1"
pytest-cov = "^4.0.0"
commitizen = "^2.42.1"
# Waiting on https://github.com/adamchainz/blacken-docs/issues/240
blacken-docs = { git = "https://github.com/znicholls/blacken-docs.git", rev = "3e62e39" }
tokenize-rt = "^5.0.0"
ruff = "^0.0.264"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
addopts = [
    "--import-mode=importlib",
]

[tool.mypy]
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_calls = true
disallow_subclassing_any = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
follow_imports = "normal"
check_untyped_defs = true
show_error_context = true
show_error_codes = true
warn_redundant_casts = true
warn_return_any = true
warn_unused_ignores = true
warn_unreachable = true
ignore_missing_imports = true
no_implicit_reexport = true
strict_equality = true
strict_optional = true

[tool.coverage.report]
fail_under = 95
skip_empty = true
show_missing = true
# Regexes for lines to exclude from consideration
exclude_lines = [
    "pragma: no cover",
    # Don't complain about missing type checking code:
    "if TYPE_CHECKING",
]

[tool.commitizen]
version = "0.5.0"
version_files = ["pyproject.toml:^version"]
tag_format = "v$version"
major_version_zero = true

[tool.jupytext]
formats = "ipynb,myst"

[tool.ruff]
src = ["src"]
target-version = "py39"
select = [
    "E",  # pycodestyle error
    "W",  # pycodestyle warning
    "F",  # pyflakes
    "I",  # isort
    "D",  # pydocstyle
    "D213",  # Multi-line docstring summary should start at the second line
    "D213",  # Multi-line docstring summary should start at the second line
    "PL",  # pylint
    "TRY",  # tryceratops
    "NPY",  # numpy rules
    "RUF",  # ruff specifics
    "ERA",  # eradicate
    "PD",  # pandas support via pandas-vet
    "UP",  # pyupgrade
    "S",  # flake8-bandit
]
ignore = [
    "D200",  # One-line docstring should fit on one line with quotes
    "D400",  # First line should end with a period
]
# Provide some leeway for long docstring, this is otherwise handled by black
line-length = 100

[tool.ruff.per-file-ignores]
"test*.py" = ["D103", "S101", "PLR0913", "PLR2004"]

[tool.ruff.isort]
known-first-party = ["src"]

[tool.ruff.pydocstyle]
convention = "numpy"
